package org.obicere.bytecode.viewer.startup.application;

import org.obicere.bytecode.core.objects.code.instruction.DefaultDStore_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDLoad_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDConst_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAThrow;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAConst_Null;
import org.obicere.bytecode.core.objects.code.instruction.DefaultALoad_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultALoad_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultALoad_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultALoad_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultANewArray;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAStore_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAStore_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAStore_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultAStore_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultArrayLength;
import org.obicere.bytecode.core.objects.code.instruction.DefaultBALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultBAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultBIPush;
import org.obicere.bytecode.core.objects.code.instruction.DefaultCALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultCAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultCheckCast;
import org.obicere.bytecode.core.objects.code.instruction.DefaultD2F;
import org.obicere.bytecode.core.objects.code.instruction.DefaultD2I;
import org.obicere.bytecode.core.objects.code.instruction.DefaultD2L;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDAdd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDCmpG;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDCmpL;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDConst_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDDiv;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDLoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDLoad_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDLoad_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDLoad_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDMul;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDNeg;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDRem;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDStore_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDStore_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDStore_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDSub;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup2_x1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup2_x2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup_x1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultDup_x2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultF2D;
import org.obicere.bytecode.core.objects.code.instruction.DefaultF2I;
import org.obicere.bytecode.core.objects.code.instruction.DefaultF2L;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFAdd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFCmpG;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFCmpL;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFConst_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFConst_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFConst_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFDiv;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFLoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFLoad_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFLoad_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFLoad_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFLoad_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFMul;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFNeg;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFRem;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFStore_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFStore_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFStore_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFStore_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultFSub;
import org.obicere.bytecode.core.objects.code.instruction.DefaultGetField;
import org.obicere.bytecode.core.objects.code.instruction.DefaultGetStatic;
import org.obicere.bytecode.core.objects.code.instruction.DefaultGoto;
import org.obicere.bytecode.core.objects.code.instruction.DefaultGoto_w;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2B;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2C;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2D;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2F;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2L;
import org.obicere.bytecode.core.objects.code.instruction.DefaultI2S;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIAdd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIAnd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_4;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_5;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIConst_m1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIDiv;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIInc;
import org.obicere.bytecode.core.objects.code.instruction.DefaultILoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultILoad_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultILoad_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultILoad_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultILoad_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIMul;
import org.obicere.bytecode.core.objects.code.instruction.DefaultINeg;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIOr;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIRem;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIShL;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIShR;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIStore_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIStore_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIStore_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIStore_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultISub;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIUShR;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIXor;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfEq;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfGe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfGt;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfLe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfLt;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfNe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfNonNull;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIfNull;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ACmpEq;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ACmpNe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpEq;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpGe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpGt;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpLe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpLt;
import org.obicere.bytecode.core.objects.code.instruction.DefaultIf_ICmpNe;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInstanceOf;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInvokeDynamic;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInvokeInterface;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInvokeSpecial;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInvokeStatic;
import org.obicere.bytecode.core.objects.code.instruction.DefaultInvokeVirtual;
import org.obicere.bytecode.core.objects.code.instruction.DefaultJSR;
import org.obicere.bytecode.core.objects.code.instruction.DefaultJSR_w;
import org.obicere.bytecode.core.objects.code.instruction.DefaultL2D;
import org.obicere.bytecode.core.objects.code.instruction.DefaultL2F;
import org.obicere.bytecode.core.objects.code.instruction.DefaultL2I;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLAdd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLAnd;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLCmp;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLConst_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLConst_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLDiv;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLLoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLLoad_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLLoad_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLLoad_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLLoad_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLMul;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLNeg;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLOr;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLRem;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLShL;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLShR;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLStore_0;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLStore_1;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLStore_2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLStore_3;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLSub;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLUShR;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLXor;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLdC;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLdC2_w;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLdC_w;
import org.obicere.bytecode.core.objects.code.instruction.DefaultLookupSwitch;
import org.obicere.bytecode.core.objects.code.instruction.DefaultMonitorEnter;
import org.obicere.bytecode.core.objects.code.instruction.DefaultMonitorExit;
import org.obicere.bytecode.core.objects.code.instruction.DefaultMultiANewArray;
import org.obicere.bytecode.core.objects.code.instruction.DefaultNew;
import org.obicere.bytecode.core.objects.code.instruction.DefaultNewArray;
import org.obicere.bytecode.core.objects.code.instruction.DefaultNop;
import org.obicere.bytecode.core.objects.code.instruction.DefaultPop;
import org.obicere.bytecode.core.objects.code.instruction.DefaultPop2;
import org.obicere.bytecode.core.objects.code.instruction.DefaultPutField;
import org.obicere.bytecode.core.objects.code.instruction.DefaultPutStatic;
import org.obicere.bytecode.core.objects.code.instruction.DefaultRet;
import org.obicere.bytecode.core.objects.code.instruction.DefaultReturn;
import org.obicere.bytecode.core.objects.code.instruction.DefaultSALoad;
import org.obicere.bytecode.core.objects.code.instruction.DefaultSAStore;
import org.obicere.bytecode.core.objects.code.instruction.DefaultSIPush;
import org.obicere.bytecode.core.objects.code.instruction.DefaultSwap;
import org.obicere.bytecode.core.objects.code.instruction.DefaultTableSwitch;
import org.obicere.bytecode.core.objects.code.instruction.DefaultWide;
import org.obicere.bytecode.core.objects.code.instruction.UnknownInstruction;
import org.obicere.bytecode.core.objects.code.instruction.aaload;
import org.obicere.bytecode.core.objects.code.instruction.aload;
import org.obicere.bytecode.viewer.context.Domain;
import org.obicere.bytecode.viewer.modeler.ModelerSet;
import org.obicere.bytecode.viewer.modeler.instruction.EmptyInstructionModeler;
import org.obicere.bytecode.viewer.modeler.instruction.UnknownInstructionModeler;
import org.obicere.bytecode.viewer.modeler.instruction.aloadModeler;
import org.obicere.bytecode.viewer.modeler.instruction.anewarrayModeler;
import org.obicere.bytecode.viewer.modeler.instruction.astoreModeler;
import org.obicere.bytecode.viewer.modeler.instruction.bipushModeler;
import org.obicere.bytecode.viewer.modeler.instruction.checkcastModeler;
import org.obicere.bytecode.viewer.modeler.instruction.dloadModeler;
import org.obicere.bytecode.viewer.modeler.instruction.dstoreModeler;
import org.obicere.bytecode.viewer.modeler.instruction.floadModeler;
import org.obicere.bytecode.viewer.modeler.instruction.fstoreModeler;
import org.obicere.bytecode.viewer.modeler.instruction.getfieldModeler;
import org.obicere.bytecode.viewer.modeler.instruction.getstaticModeler;
import org.obicere.bytecode.viewer.modeler.instruction.gotoModeler;
import org.obicere.bytecode.viewer.modeler.instruction.goto_wModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_acmpeqModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_acmpneModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpeqModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpgeModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpgtModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpleModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpltModeler;
import org.obicere.bytecode.viewer.modeler.instruction.if_icmpneModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifeqModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifgeModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifgtModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifleModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifltModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifneModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifnonnullModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ifnullModeler;
import org.obicere.bytecode.viewer.modeler.instruction.iincModeler;
import org.obicere.bytecode.viewer.modeler.instruction.iloadModeler;
import org.obicere.bytecode.viewer.modeler.instruction.instanceofModeler;
import org.obicere.bytecode.viewer.modeler.instruction.invokedynamicModeler;
import org.obicere.bytecode.viewer.modeler.instruction.invokeinterfaceModeler;
import org.obicere.bytecode.viewer.modeler.instruction.invokespecialModeler;
import org.obicere.bytecode.viewer.modeler.instruction.invokestaticModeler;
import org.obicere.bytecode.viewer.modeler.instruction.invokevirtualModeler;
import org.obicere.bytecode.viewer.modeler.instruction.istoreModeler;
import org.obicere.bytecode.viewer.modeler.instruction.jsrModeler;
import org.obicere.bytecode.viewer.modeler.instruction.jsr_wModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ldc2_wModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ldcModeler;
import org.obicere.bytecode.viewer.modeler.instruction.ldc_wModeler;
import org.obicere.bytecode.viewer.modeler.instruction.lloadModeler;
import org.obicere.bytecode.viewer.modeler.instruction.lookupswitchModeler;
import org.obicere.bytecode.viewer.modeler.instruction.lstoreModeler;
import org.obicere.bytecode.viewer.modeler.instruction.multianewarrayModeler;
import org.obicere.bytecode.viewer.modeler.instruction.newModeler;
import org.obicere.bytecode.viewer.modeler.instruction.newarrayModeler;
import org.obicere.bytecode.viewer.modeler.instruction.putfieldModeler;
import org.obicere.bytecode.viewer.modeler.instruction.putstaticModeler;
import org.obicere.bytecode.viewer.modeler.instruction.retModeler;
import org.obicere.bytecode.viewer.modeler.instruction.sipushModeler;
import org.obicere.bytecode.viewer.modeler.instruction.tableswitchModeler;
import org.obicere.bytecode.viewer.modeler.instruction.wideModeler;
import org.obicere.bytecode.viewer.startup.StartUpTask;

/**
 */
public class ProvideInstructionModelers implements StartUpTask {
    @Override
    public void call(final Domain domain) {
        final ModelerSet modelerSet = domain.getModelers();
        modelerSet.add(aaload.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAConst_Null.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(aload.IDENTIFIER, new aloadModeler());
        modelerSet.add(DefaultALoad_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultALoad_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultALoad_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultALoad_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultANewArray.IDENTIFIER, new anewarrayModeler());
        modelerSet.add(DefaultAReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultArrayLength.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAStore.IDENTIFIER, new astoreModeler());
        modelerSet.add(DefaultAStore_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAStore_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAStore_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAStore_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultAThrow.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultBALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultBAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultBIPush.IDENTIFIER, new bipushModeler());
        modelerSet.add(DefaultCALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultCAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultCheckCast.IDENTIFIER, new checkcastModeler());
        modelerSet.add(DefaultD2F.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultD2I.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultD2L.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDAdd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDCmpG.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDCmpL.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDConst_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDConst_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDDiv.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDLoad.IDENTIFIER, new dloadModeler());
        modelerSet.add(DefaultDLoad_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDLoad_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDLoad_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDLoad_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDMul.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDNeg.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDRem.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDStore.IDENTIFIER, new dstoreModeler());
        modelerSet.add(DefaultDStore_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDStore_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDStore_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDStore_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDSub.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup2_x1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup2_x2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup_x1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultDup_x2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultF2D.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultF2I.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultF2L.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFAdd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFCmpG.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFCmpL.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFConst_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFConst_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFConst_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFDiv.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFLoad.IDENTIFIER, new floadModeler());
        modelerSet.add(DefaultFLoad_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFLoad_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFLoad_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFLoad_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFMul.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFNeg.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFRem.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFStore.IDENTIFIER, new fstoreModeler());
        modelerSet.add(DefaultFStore_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFStore_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFStore_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFStore_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultFSub.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultGetField.IDENTIFIER, new getfieldModeler());
        modelerSet.add(DefaultGetStatic.IDENTIFIER, new getstaticModeler());
        modelerSet.add(DefaultGoto.IDENTIFIER, new gotoModeler());
        modelerSet.add(DefaultGoto_w.IDENTIFIER, new goto_wModeler());
        modelerSet.add(DefaultI2B.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultI2C.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultI2D.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultI2F.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultI2L.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultI2S.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIAdd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIAnd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_4.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_5.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIConst_m1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIDiv.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIfEq.IDENTIFIER, new ifeqModeler());
        modelerSet.add(DefaultIfGe.IDENTIFIER, new ifgeModeler());
        modelerSet.add(DefaultIfGt.IDENTIFIER, new ifgtModeler());
        modelerSet.add(DefaultIfLe.IDENTIFIER, new ifleModeler());
        modelerSet.add(DefaultIfLt.IDENTIFIER, new ifltModeler());
        modelerSet.add(DefaultIfNe.IDENTIFIER, new ifneModeler());
        modelerSet.add(DefaultIfNonNull.IDENTIFIER, new ifnonnullModeler());
        modelerSet.add(DefaultIfNull.IDENTIFIER, new ifnullModeler());
        modelerSet.add(DefaultIf_ACmpEq.IDENTIFIER, new if_acmpeqModeler());
        modelerSet.add(DefaultIf_ACmpNe.IDENTIFIER, new if_acmpneModeler());
        modelerSet.add(DefaultIf_ICmpEq.IDENTIFIER, new if_icmpeqModeler());
        modelerSet.add(DefaultIf_ICmpGe.IDENTIFIER, new if_icmpgeModeler());
        modelerSet.add(DefaultIf_ICmpGt.IDENTIFIER, new if_icmpgtModeler());
        modelerSet.add(DefaultIf_ICmpLe.IDENTIFIER, new if_icmpleModeler());
        modelerSet.add(DefaultIf_ICmpLt.IDENTIFIER, new if_icmpltModeler());
        modelerSet.add(DefaultIf_ICmpNe.IDENTIFIER, new if_icmpneModeler());
        modelerSet.add(DefaultIInc.IDENTIFIER, new iincModeler());
        modelerSet.add(DefaultILoad.IDENTIFIER, new iloadModeler());
        modelerSet.add(DefaultILoad_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultILoad_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultILoad_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultILoad_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIMul.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultINeg.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultInstanceOf.IDENTIFIER, new instanceofModeler());
        modelerSet.add(DefaultInvokeDynamic.IDENTIFIER, new invokedynamicModeler());
        modelerSet.add(DefaultInvokeInterface.IDENTIFIER, new invokeinterfaceModeler());
        modelerSet.add(DefaultInvokeSpecial.IDENTIFIER, new invokespecialModeler());
        modelerSet.add(DefaultInvokeStatic.IDENTIFIER, new invokestaticModeler());
        modelerSet.add(DefaultInvokeVirtual.IDENTIFIER, new invokevirtualModeler());
        modelerSet.add(DefaultIOr.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIRem.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIShL.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIShR.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIStore.IDENTIFIER, new istoreModeler());
        modelerSet.add(DefaultIStore_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIStore_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIStore_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIStore_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultISub.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIUShR.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultIXor.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultJSR.IDENTIFIER, new jsrModeler());
        modelerSet.add(DefaultJSR_w.IDENTIFIER, new jsr_wModeler());
        modelerSet.add(DefaultL2D.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultL2F.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultL2I.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLAdd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLAnd.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLCmp.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLConst_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLConst_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLdC.IDENTIFIER, new ldcModeler());
        modelerSet.add(DefaultLdC2_w.IDENTIFIER, new ldc2_wModeler());
        modelerSet.add(DefaultLdC_w.IDENTIFIER, new ldc_wModeler());
        modelerSet.add(DefaultLDiv.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLLoad.IDENTIFIER, new lloadModeler());
        modelerSet.add(DefaultLLoad_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLLoad_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLLoad_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLLoad_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLMul.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLNeg.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLookupSwitch.IDENTIFIER, new lookupswitchModeler());
        modelerSet.add(DefaultLOr.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLRem.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLShL.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLShR.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLStore.IDENTIFIER, new lstoreModeler());
        modelerSet.add(DefaultLStore_0.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLStore_1.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLStore_2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLStore_3.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLSub.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLUShR.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultLXor.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultMonitorEnter.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultMonitorExit.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultMultiANewArray.IDENTIFIER, new multianewarrayModeler());
        modelerSet.add(DefaultNewArray.IDENTIFIER, new newarrayModeler());
        modelerSet.add(DefaultNew.IDENTIFIER, new newModeler());
        modelerSet.add(DefaultNop.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultPop.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultPop2.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultPutField.IDENTIFIER, new putfieldModeler());
        modelerSet.add(DefaultPutStatic.IDENTIFIER, new putstaticModeler());
        modelerSet.add(DefaultRet.IDENTIFIER, new retModeler());
        modelerSet.add(DefaultReturn.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultSALoad.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultSAStore.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultSIPush.IDENTIFIER, new sipushModeler());
        modelerSet.add(DefaultSwap.IDENTIFIER, EmptyInstructionModeler.getInstance());
        modelerSet.add(DefaultTableSwitch.IDENTIFIER, new tableswitchModeler());
        modelerSet.add(DefaultWide.IDENTIFIER, new wideModeler());

        modelerSet.add(UnknownInstruction.IDENTIFIER, new UnknownInstructionModeler());
    }
}
